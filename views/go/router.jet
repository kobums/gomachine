package router

import (
# {{if jsonFlag}}
#    "encoding/json"
# {{end}}
# {{if urlImport}}
#    "net/url"
# {{end}}
  "strconv"
  "strings"
# {{if auth == "jwt"}}
#   "net/http"
# {{end}}
{{if apis}}
	"{{packageName}}/controllers/api"
{{end}}
	"{{packageName}}/controllers/rest"
  # "{{packageName}}/models"
	"{{packageName}}/router/routers"
{{range imports}}
{{if . != "int64" && . != "[]int64" && . != "[]int" && . != "models" && . != "gocql" && . != "[]models" && . != "*[]models"}}
    "{{packageName}}/models/{{.}}"
{{end}}
{{end}}
{{if cassandra}}
	"github.com/gocql/gocql"
{{end}}
	"github.com/gofiber/fiber/v2"
)

func getArrayCommal(name string) []int64 {
	values := strings.Split(name, ",")

	var items []int64
	for _, item := range values {
        n, _ := strconv.ParseInt(item, 10, 64)
		items = append(items, n)
	}

	return items
}

func getArrayCommai(name string) []int {
	values := strings.Split(name, ",")

	var items []int
	for _, item := range values {
        n, _ := strconv.Atoi(item)
		items = append(items, n)
	}

	return items
}

func SetRouter(r *fiber.App) {
{{if auth == "jwt"}}
    r.Get("/api/jwt", func(c *fiber.Ctx) error {
		loginid := c.Query("loginid")
        passwd := c.Query("passwd")
        return c.JSON(JwtAuth(c, loginid, passwd))
	})
{{end}}
	apiGroup := r.Group("/api")
{{if auth == "jwt"}}
	apiGroup.Use(JwtAuthRequired)
{{end}}

	// Setup domain-specific routes
{{- range domains}}
	routers.Setup{{.|title}}Routes(apiGroup)
{{- end}}
}