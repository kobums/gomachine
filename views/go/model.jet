package models

import (
    "{{packageName}}/global/config"
    "{{packageName}}/models/{{name|lower}}"
    "database/sql"
    "errors"
    "fmt"
    "strings"
    "time"

    log "{{packageName}}/global/log"
    _ "github.com/go-sql-driver/mysql"
    _ "github.com/lib/pq"

)

type {{name}} struct {
    {{range items}}        
    {{.Name|title}}                {{if .Name == "Id"}}int64{{else}}{{.Type}}{{end}} `json:{{if .Name == "Passwd"}}"-"{{else}}"{{.Name|lower}}"{{end}}` {{end}}
    
    Extra                    map[string]interface{} `json:"extra"`
}
{{if name == "User"}}type {{name}}Update struct {
    {{range items}}        
    {{.Name|title}}                {{if .Name == "Id"}}int64{{else}}{{.Type}}{{end}} `json:"{{.Name|lower}}"` {{end}}
    
    Extra                    map[string]interface{} `json:"extra"`
}
{{end}}
type {{name}}Manager struct {
    Conn    *Connection
    Result  *sql.Result
    Index   string
    Isolation   bool
    SelectQuery  string
    JoinQuery string
    CountQuery   string
    GroupQuery string
    SelectLog bool
    Log bool
}
{{if name == "User"}}func (c *{{name}}) ConvertUpdate() *{{name}}Update {    
    item := &{{name}}Update{}
    {{range items}}        
    item.{{.Name|title}} = c.{{.Name|title}}{{end}}

    return item
}
{{end}}
func (c *{{name}}) AddExtra(key string, value interface{}) {    
	c.Extra[key] = value     
}

func New{{name}}Manager(conn *Connection) *{{name}}Manager {
    var item {{name}}Manager


    if conn == nil {
        item.Conn = NewConnection()
        item.Isolation = false
    } else {
        item.Conn = conn 
        item.Isolation = conn.Isolation
    }

    item.Index = ""
    item.SelectLog = config.Log.Database
    item.Log = config.Log.Database

    return &item
}

func (p *{{name}}Manager) Close() {
    if p.Conn != nil {
        p.Conn.Close()
    }
}

func (p *{{name}}Manager) SetIndex(index string) {
    p.Index = index
}

func (p *{{name}}Manager) SetCountQuery(query string) {
    p.CountQuery = query
}

func (p *{{name}}Manager) SetSelectQuery(query string) {
    p.SelectQuery = query
}

func (p *{{name}}Manager) Exec(query string, params ...interface{}) (sql.Result, error) {
    if p.Log {
       if len(params) > 0 {
	       log.Debug().Str("query", query).Any("param", params).Msg("SQL")
       } else {
	       log.Debug().Str("query", query).Msg("SQL")
       }
    }

    return p.Conn.Exec(query, params...)
}

func (p *{{name}}Manager) Query(query string, params ...interface{}) (*sql.Rows, error) {
    if p.Isolation {
        query += " for update"
    }

    if p.SelectLog {
       if len(params) > 0 {
	       log.Debug().Str("query", query).Any("param", params).Msg("SQL")
       } else {
	       log.Debug().Str("query", query).Msg("SQL")
       }
    }

    return p.Conn.Query(query, params...)
}

func (p *{{name}}Manager) GetQuery() string {
    if p.SelectQuery != "" {
        return p.SelectQuery    
    }

    var ret strings.Builder

    ret.WriteString("select {{range i, v := items}}{{if i > 0}}, {{end}}{{v.Column}}{{end}}{{range i2, v2 := joins}}{{range columns(v2.Name)}}, {{v2.Prefix}}_{{.Name|lower}}{{end}}{{end}} from {{tableName}}{{range joins}}, {{.Name}}_tb{{end}}")

    if p.Index != "" {
        ret.WriteString(" use index(")
        ret.WriteString(p.Index)
        ret.WriteString(")")
    }

    if p.JoinQuery != "" {
        ret.WriteString(", ")
        ret.WriteString(p.JoinQuery)
    }

    ret.WriteString(" where 1=1 ")
    {{range joins}}
    ret.WriteString("and {{prefix}}_{{.Column}} = {{.Prefix}}_id ")
    {{end}}

    return ret.String()
}

func (p *{{name}}Manager) GetQuerySelect() string {
    if p.CountQuery != "" {
        return p.CountQuery    
    }

    var ret strings.Builder
    
    ret.WriteString("select count(*) from {{tableName}}")

    if p.Index != "" {
        ret.WriteString(" use index(")
        ret.WriteString(p.Index)
        ret.WriteString(")")
    }

    if p.JoinQuery != "" {
        ret.WriteString(", ")
        ret.WriteString(p.JoinQuery)
    }

    ret.WriteString(" where 1=1 ")
    {{range joins}}
    ret.WriteString("and {{prefix}}_{{.Column}} = {{.Prefix}}_id ")
    {{end}}

    return ret.String()
}

func (p *{{name}}Manager) GetQueryGroup(name string) string {
    if p.CountQuery != "" {
        return p.CountQuery    
    }

    var ret strings.Builder
    ret.WriteString("select u_")
    ret.WriteString(name)
    ret.WriteString(", count(*) from {{tableName}}")

    if p.Index != "" {
        ret.WriteString(" use index(")
        ret.WriteString(p.Index)
        ret.WriteString(")")
    }

    ret.WriteString(" where 1=1 ")
    {{range joins}}
    ret.WriteString("and {{prefix}}_{{.Column}} = {{.Prefix}}_id ")
    {{end}}

    return ret.String()
}

func (p *{{name}}Manager) Truncate() error {
    if !p.Conn.IsConnect() {
        return errors.New("Connection Error")
    }
    
    query := "truncate {{tableName}} "
    _, err := p.Exec(query)

    if err != nil {
       if p.Log {
          log.Error().Str("error", err.Error()).Msg("SQL")
       }
    }

    return nil
}

func (p *{{name}}Manager) Insert(item *{{if name == "User"}}{{name}}Update{{else}}{{name}}{{end}}) error {
    if !p.Conn.IsConnect() {
        return errors.New("Connection Error")
    }

    if item.Date == "" {
        t := time.Now().UTC().Add(time.Hour * 9)
        //t := time.Now()
        item.Date = fmt.Sprintf("%04d-%02d-%02d %02d:%02d:%02d", t.Year(), t.Month(), t.Day(), t.Hour(), t.Minute(), t.Second())
    }

    {{range i, v := items}}{{if v.OriginalType == "date" || v.OriginalType == "datetime"}}
    if item.{{v.Name|title}} == "" {
       item.{{v.Name|title}} = "1000-01-01 00:00:00"
    }
	{{end}}{{end}}

    query := ""
    var res sql.Result
    var err error
    if item.Id > 0 {
        query = "insert into {{tableName}} ({{range i, v := items}}{{if i > 0}}, {{end}}{{v.Column}}{{end}}) values ({{range i, v := items}}{{if i > 0}}, {{end}}?{{end}})"
        res, err = p.Exec(query{{range items}}, item.{{.Name|title}}{{end}})
    } else {
        query = "insert into {{tableName}} ({{range i, v := items}}{{if v.Name != "Id"}}{{if i > 1}}, {{end}}{{v.Column}}{{end}}{{end}}) values ({{range i, v := items}}{{if v.Name != "Id"}}{{if i > 1}}, {{end}}?{{end}}{{end}})"
        res, err = p.Exec(query{{range items}}{{if .Name != "Id"}}, item.{{.Name|title}}{{end}}{{end}})
    }
    
    if err == nil {
        p.Result = &res
        
    } else {
        if p.Log {
          log.Error().Str("error", err.Error()).Msg("SQL")
        }
        p.Result = nil
    }

    return err
}

func (p *{{name}}Manager) Delete(id int64) error {
    if !p.Conn.IsConnect() {
        return errors.New("Connection Error")
    }

    query := "delete from {{tableName}} where {{prefix}}_id = ?"
    _, err := p.Exec(query, id)

    if err != nil {
       if p.Log {
          log.Error().Str("error", err.Error()).Msg("SQL")
       }
    }

    
    return err
}

func (p *{{name}}Manager) DeleteAll() error {
    if !p.Conn.IsConnect() {
        return errors.New("Connection Error")
    }

    query := "delete from {{tableName}}"
    _, err := p.Exec(query)

    if err != nil {
       if p.Log {
          log.Error().Str("error", err.Error()).Msg("SQL")
       }
    }

    return err
}

func (p *{{name}}Manager) MakeQuery(initQuery string , postQuery string, initParams []interface{}, args []interface{}) (string, []interface{}) {
    var params []interface{}
    if initParams != nil {
        params = append(params, initParams...)
    }

    pos := 1

    var query strings.Builder
	query.WriteString(initQuery)

    for _, arg := range args {
        switch v := arg.(type) {        
        case Where:
            item := v

            if strings.Contains(item.Column, "_") {
                query.WriteString(" and ")
            } else {
                query.WriteString(" and {{prefix}}_")
            }
            query.WriteString(item.Column)

            if item.Compare == "in" {
                query.WriteString(" in (")
                query.WriteString(strings.Trim(strings.Replace(fmt.Sprint(item.Value), " ", ", ", -1), "[]"))
                query.WriteString(")")
            } else if item.Compare == "not in" {
                query.WriteString(" not in (")
                query.WriteString(strings.Trim(strings.Replace(fmt.Sprint(item.Value), " ", ", ", -1), "[]"))
                query.WriteString(")")
            } else if item.Compare == "between" {
                if config.Database.Type == config.Postgresql {
                    query.WriteString(fmt.Sprintf(" between $%v and $%v", pos, pos + 1))
                    pos += 2
                } else {
                    query.WriteString(" between ? and ?")
                }

                s := item.Value.([2]string)
                params = append(params, s[0])
                params = append(params, s[1])
            } else {
                if config.Database.Type == config.Postgresql {
                    query.WriteString(" ")
                    query.WriteString(item.Compare)
                    query.WriteString(fmt.Sprintf(" $%v", pos))
                    pos++
                } else {
                    query.WriteString(" ")
                    query.WriteString(item.Compare)
                    query.WriteString(" ?")
                }
                if item.Compare == "like" {
                    params = append(params, "%" + item.Value.(string) + "%")
                } else {
                    params = append(params, item.Value)                
                }
            }
        case Custom:
             item := v

            query.WriteString(" and ")
            query.WriteString(item.Query)
        }        
    }

	query.WriteString(postQuery)

    return query.String(), params
}

func (p *{{name}}Manager) DeleteWhere(args []interface{}) error {
    if !p.Conn.IsConnect() {
        return errors.New("Connection Error")
    }

    query, params := p.MakeQuery("delete from {{tableName}} where 1=1", "", nil, args)
    _, err := p.Exec(query, params...)

    if err != nil {
       if p.Log {
          log.Error().Str("error", err.Error()).Msg("SQL")
       }
    }

    return err
}

func (p *{{name}}Manager) Update(item *{{if name == "User"}}{{name}}Update{{else}}{{name}}{{end}}) error {
    if !p.Conn.IsConnect() {
        return errors.New("Connection Error")
    }
    
    {{range i, v := items}}{{if v.OriginalType == "date" || v.OriginalType == "datetime"}}
    if item.{{v.Name|title}} == "" {
       item.{{v.Name|title}} = "1000-01-01 00:00:00"
    }
	{{end}}{{end}}

	query := "update {{tableName}} set {{range i, v := items}}{{if v.Name != "Id"}}{{if i > 1}}, {{end}}{{v.Column}} = ?{{end}}{{end}} where {{prefix}}_id = ?"
	_, err := p.Exec(query{{range items}}{{if .Name != "Id"}}, item.{{.Name|title}}{{end}}{{end}}, item.Id)

    if err != nil {
        if p.Log {
          log.Error().Str("error", err.Error()).Msg("SQL")
        }
    }
    
        
    return err
}

func (p *{{name}}Manager) UpdateWhere(columns []{{name|lower}}.Params, args []interface{}) error {
    if !p.Conn.IsConnect() {
        return errors.New("Connection Error")
    }

    var initQuery strings.Builder
    var initParams []interface{}

    initQuery.WriteString("update {{tableName}} set ")
    for i, v := range columns {
        if i > 0 {
            initQuery.WriteString(", ")
        }

        {{range items}}if v.Column == {{name|lower}}.Column{{.Name|title}} {
        initQuery.WriteString("{{.Column}} = ?")
        initParams = append(initParams, v.Value)
        } else {{end}}{
        
        }
    }

    initQuery.WriteString(" where 1=1 ")

    query, params := p.MakeQuery(initQuery.String(), "", initParams, args)
    _, err := p.Exec(query, params...)

    if err != nil {
       if p.Log {
          log.Error().Str("error", err.Error()).Msg("SQL")
       }
    }

    
    return err
}

/*

{{range items}}{{if .Name != "Id"}}
func (p *{{name}}Manager) Update{{.Name|title}}(value {{.Type}}, id int64) error {
    if !p.Conn.IsConnect() {
        return errors.New("Connection Error")
    }

	query := "update {{tableName}} set {{.Column}} = ? where {{prefix}}_id = ?"
	_, err := p.Exec(query, value, id)

    if err != nil {
        if p.Log {
          log.Error().Str("error", err.Error()).Msg("SQL")
        }
    }

    return err
}
{{end}}{{end}}

*/

func (p *{{name}}Manager) GetIdentity() int64 {
    if !p.Conn.IsConnect() {
        return 0
    }

    id, err := (*p.Result).LastInsertId()

    if err != nil {
        if p.Log {
          log.Error().Str("error", err.Error()).Msg("SQL")
        }
        return 0
    } else {
        return id
    }
}

func (p *{{name}}) InitExtra() {
    p.Extra = map[string]interface{}{
{{range consts}}            "{{.Name|lower}}":     {{name|lower}}.Get{{.Name|title}}(p.{{.Name|title}}),
{{end}}
    }
}

func (p *{{name}}Manager) ReadRow(rows *sql.Rows) *{{name}} {
    var item {{name}}
    var err error

    {{range joins}}var _{{.Name|lower}} {{.Name|title}}
    {{end}}

    if rows.Next() {
        err = rows.Scan({{range i, v := items}}{{if i > 0}}, {{end}}&item.{{v.Name|title}}{{end}}{{range i2, v2 := joins}}{{range columns(v2.Name)}}, &_{{v2.Name|lower}}.{{.Name}}{{end}}{{end}})
        {{range i, v := items}}{{if v.OriginalType == "date" || v.OriginalType == "datetime"}}
        if item.{{v.Name|title}} == "0000-00-00 00:00:00" || item.{{v.Name|title}} == "1000-01-01 00:00:00" || item.{{v.Name|title}} == "9999-01-01 00:00:00" {
            item.{{v.Name|title}} = ""
        }

        if config.Database.Type == config.Postgresql {
            item.{{v.Name|title}} = strings.ReplaceAll(strings.ReplaceAll(item.{{v.Name|title}}, "T", " "), "Z", "")
        }
		{{end}}{{end}}

    } else {
        return nil
    }

    if err != nil {
        if p.Log {
          log.Error().Str("error", err.Error()).Msg("SQL")
        }
        return nil
    } else {

        item.InitExtra()
        {{range joins}}_{{.Name|lower}}.InitExtra()
        item.AddExtra("{{.Name|lower}}",  _{{.Name|lower}})
{{end}}
        return &item
    }
}

func (p *{{name}}Manager) ReadRows(rows *sql.Rows) []{{name}} {
    var items []{{name}}

    for rows.Next() {
        var item {{name}}
        {{range joins}}var _{{.Name|lower}} {{.Name|title}}
        {{end}}
    
        err := rows.Scan({{range i, v := items}}{{if i > 0}}, {{end}}&item.{{v.Name|title}}{{end}}{{range i2, v2 := joins}}{{range columns(v2.Name)}}, &_{{v2.Name|lower}}.{{.Name}}{{end}}{{end}})
        if err != nil {
           if p.Log {
             log.Error().Str("error", err.Error()).Msg("SQL")
           }
           break
        }

        {{range i, v := items}}{{if v.OriginalType == "date" || v.OriginalType == "datetime"}}
        if item.{{v.Name|title}} == "0000-00-00 00:00:00" || item.{{v.Name|title}} == "1000-01-01 00:00:00" || item.{{v.Name|title}} == "9999-01-01 00:00:00" {
            item.{{v.Name|title}} = ""
        }

        if config.Database.Type == config.Postgresql {
            item.{{v.Name|title}} = strings.ReplaceAll(strings.ReplaceAll(item.{{v.Name|title}}, "T", " "), "Z", "")
        }
		{{end}}{{end}}
        
        item.InitExtra()        
        {{range joins}}_{{.Name|lower}}.InitExtra()
        item.AddExtra("{{.Name|lower}}",  _{{.Name|lower}})
{{end}}
        items = append(items, item)
    }


     return items
}

func (p *{{name}}Manager) Get(id int64) *{{name}} {
    if !p.Conn.IsConnect() {
        return nil
    }

    var query strings.Builder
    query.WriteString(p.GetQuery())
    query.WriteString(" and {{prefix}}_id = ?")

    {{range joins}}
    query.WriteString(" and {{prefix}}_{{.Column}} = {{.Prefix}}_id")
    {{end}}
    
    rows, err := p.Query(query.String(), id)

    if err != nil {
       if p.Log {
          log.Error().Str("error", err.Error()).Msg("SQL")
       }
       return nil
    }

    defer rows.Close()

    return p.ReadRow(rows)
}

func (p *{{name}}Manager) GetWhere(args []interface{}) *{{name}} {
    items := p.Find(args)
    if len(items) == 0 {
        return nil
    }

    return &items[0]
}

func (p *{{name}}Manager) Count(args []interface{}) int {
    if !p.Conn.IsConnect() {
        return 0
    }

    query, params := p.MakeQuery(p.GetQuerySelect(), p.GroupQuery, nil, args)
    rows, err := p.Query(query, params...)

    if err != nil {
       if p.Log {
          log.Error().Str("error", err.Error()).Msg("SQL")
       }
       return 0
    }

    defer rows.Close()

    if !rows.Next() {
        return 0
    }

    cnt := 0
    err = rows.Scan(&cnt)

    if err != nil {
        return 0
    } else {
        return cnt
    }
}

func (p *{{name}}Manager) FindAll() []{{name}} {
    return p.Find(nil)
}

func (p *{{name}}Manager) Find(args []interface{}) []{{name}} {
    if !p.Conn.IsConnect() {
        var items []{{name}}
        return items
    }

    var params []interface{}
    baseQuery := p.GetQuery()

    var query strings.Builder

    page := 0
    pagesize := 0
    orderby := ""

    pos := 1
    
    for _, arg := range args {
        switch v := arg.(type) {
        case PagingType:
            item := v
            page = item.Page
            pagesize = item.Pagesize            
        case OrderingType:
            item := v
            orderby = item.Order
        case LimitType:
            item := v
            page = 1
            pagesize = item.Limit
        case OptionType:
            item := v
            if item.Limit > 0 {
                page = 1
                pagesize = item.Limit
            } else {
                page = item.Page
                pagesize = item.Pagesize                
            }
            orderby = item.Order
        case Where:
            item := v

            if strings.Contains(item.Column, "_") {
                query.WriteString(" and ")
            } else {
                query.WriteString(" and {{prefix}}_")
            }
            query.WriteString(item.Column)
            
            if item.Compare == "in" {
                query.WriteString(" in (")
                query.WriteString(strings.Trim(strings.Replace(fmt.Sprint(item.Value), " ", ", ", -1), "[]"))
                query.WriteString(")")
            } else if item.Compare == "not in" {
                query.WriteString(" not in (")
                query.WriteString(strings.Trim(strings.Replace(fmt.Sprint(item.Value), " ", ", ", -1), "[]"))
                query.WriteString(")")
            } else if item.Compare == "between" {
                if config.Database.Type == config.Postgresql {
                    query.WriteString(fmt.Sprintf(" between $%v and $%v", pos, pos + 1))
                    pos += 2
                } else {
                    query.WriteString(" between ? and ?")
                }

                s := item.Value.([2]string)
                params = append(params, s[0])
                params = append(params, s[1])
            } else {
                if config.Database.Type == config.Postgresql {
                    query.WriteString(" ")
                    query.WriteString(item.Compare)
                    query.WriteString(fmt.Sprintf(" $%v", pos))
                    pos++
                } else {
                    query.WriteString(" ")
                    query.WriteString(item.Compare)
                    query.WriteString(" ?")
                }
                if item.Compare == "like" {
                    params = append(params, "%" + item.Value.(string) + "%")
                } else {
                    params = append(params, item.Value)                
                }
            }
        case Custom:
             item := v

            query.WriteString(" and ")
            query.WriteString(item.Query)
        case Base:
             item := v

             baseQuery = item.Query
        }
    }

    query.WriteString(p.GroupQuery)
    
    startpage := (page - 1) * pagesize
    
    if page > 0 && pagesize > 0 {
        if orderby == "" {
            orderby = "{{prefix}}_id desc"
        } else {
            if !strings.Contains(orderby, "_") {                   
                orderby = "{{prefix}}_" + orderby
            }
            
        }
        query.WriteString(" order by ")
        query.WriteString(orderby)
        if config.Database.Type == config.Postgresql {
            query.WriteString(fmt.Sprintf(" limit $%v offset $%v", pos, pos + 1))
            params = append(params, pagesize)
            params = append(params, startpage)
        } else if config.Database.Type == config.Mysql {
            query.WriteString(" limit ? offset ?")
            params = append(params, pagesize)
            params = append(params, startpage)
        } else if config.Database.Type == config.Sqlserver {
            query.WriteString("OFFSET ? ROWS FETCH NEXT ? ROWS ONLY")
            params = append(params, startpage)
            params = append(params, pagesize)
        }
    } else {
        if orderby == "" {
            orderby = "{{prefix}}_id"
        } else {
            if !strings.Contains(orderby, "_") {
                orderby = "{{prefix}}_" + orderby
            }
        }
        query.WriteString(" order by ")
        query.WriteString(orderby)
    }

    rows, err := p.Query(baseQuery + query.String(), params...)

    if err != nil {
       if p.Log {
          log.Error().Str("error", err.Error()).Msg("SQL")
       }
        var items []{{name}}
        return items
    }

    defer rows.Close()

    return p.ReadRows(rows)
}

{{range funcs}}
{{if querytype(.Name) == "Get"}}func (p *{{name}}Manager) {{.Name}}({{range .Wheres}}{{.Column|lower}} {{.Type}}, {{end}}args ...interface{}) *{{name}} {
    {{range .Wheres}}if {{.Column|lower}}{{if .Type == "int" || .Type == "int64"}} != 0 {{else if .Type == "string"}} != "" {{else}} != 0 {{end}}{
        args = append(args, Where{Column:"{{.Column|lower}}", Value:{{.Column|lower}}, Compare:"{{.Compare}}"})        
    }
    {{end}}
    items := p.Find(args)

    if len(items) > 0 {
        return &items[0]
    } else {
        return nil
    }
}{{end}}{{if querytype(.Name) == "Find"}}func (p *{{name}}Manager) {{.Name}}({{range .Wheres}}{{if .Column == "Type"}}typeid{{else}}{{.Column|lower}}{{end}} {{.Type}}, {{end}}args ...interface{}) []{{name}} {
    rets := make([]interface{}, 0)
    rets = append(rets, args...)

    {{range .Wheres}}{{if !hasPrefix(.Type, "[]")}}if {{.Column|lower}}{{if .Type == "int" || .Type == "int64"}} != 0 {{else if .Type == "string"}} != "" {{else}} != 0 {{end}}{ {{end}}
        rets = append(rets, Where{Column:"{{.Column|lower}}", Value:{{if .Column == "Type"}}typeid{{else}}{{.Column|lower}}{{end}}, Compare:"{{.Compare}}"})
    {{if !hasPrefix(.Type, "[]")}} }{{end}}
    {{end}}
    return p.Find(rets)
}{{end}}{{if querytype(.Name) == "Count"}}func (p *{{name}}Manager) {{.Name}}({{range .Wheres}}{{if .Column == "Type"}}typeid{{else}}{{.Column|lower}}{{end}} {{.Type}}, {{end}}args ...interface{}) int {
    rets := make([]interface{}, 0)
    rets = append(rets, args...)
    
    {{range .Wheres}}{{if !hasPrefix(.Type, "[]")}}if {{.Column|lower}}{{if .Type == "int" || .Type == "int64"}} != 0 {{else if .Type == "string"}} != "" {{else}} != 0 {{end}}{ {{end}}
        rets = append(rets, Where{Column:"{{.Column|lower}}", Value:{{if .Column == "Type"}}typeid{{else}}{{.Column|lower}}{{end}}, Compare:"{{.Compare}}"})
    {{if !hasPrefix(.Type, "[]")}} }{{end}}
    {{end}}
    return p.Count(rets)
}{{end}}{{if querytype(.Name) == "Delete"}}func (p *{{name}}Manager) {{.Name}}({{range i, v := .Wheres}}{{if i > 0}}, {{end}}{{v.Column|lower}} {{v.Type}}{{end}}) error {
     if !p.Conn.IsConnect() {
        return errors.New("Connection Error")
    }

    query := "delete from {{tableName}} where {{range i, v := .Wheres}}{{if i > 0}} and {{end}}{{prefix}}_{{v.Column|lower}} = ?{{end}}"
    _, err := p.Exec(query{{range .Wheres}}, {{.Column|lower}}{{end}})

    return err
}{{end}}{{if querytype(.Name) == "Update"}}func (p *{{name}}Manager) {{.Name}}({{range i, v := .Wheres}}{{if i > 0}}, {{end}}{{v.Column|lower}} {{v.Type}}{{end}}) error {
     if !p.Conn.IsConnect() {
        return errors.New("Connection Error")
    }

    query := "update {{tableName}} set {{range i, v := .Wheres}}{{if v.Compare == "column"}}{{if i > 0}}, {{end}}{{prefix}}_{{v.Column|lower}} = ?{{end}}{{end}} where 1=1{{range i, v := .Wheres}}{{if v.Compare == "where"}} and {{prefix}}_{{v.Column|lower}} = ?{{end}}{{end}}"
	_, err := p.Exec(query{{range .Wheres}}, {{.Column|lower}}{{end}})

    return err    
}{{end}}
{{end}}
{{sumflag := false}}{{range items}}{{if .Name == "Price" || .Name == "Totalprice" || .Name == "Count" || .Name == "Score"}}{{sumflag = true}}{{end}}{{end}}
{{if sumflag == true}}func (p *{{name}}Manager) Sum(args []interface{}) *{{name}} {
    if !p.Conn.IsConnect() {
        var item {{name}}
        return &item
    }

    var params []interface{}

    {{flag := false}}
    query := "select sum({{prefix}}_{{range items}}{{if .Name == "Price" || .Name == "Totalprice" || .Name == "Count" || .Name == "Score"}}{{if flag == true}},{{end}}{{.Name|lower}}{{flag = true}}{{end}}{{end}}) from {{tableName}}"

    if p.Index != "" {
        query = query + " use index(" + p.Index + ") "
    }

    query += "where 1=1 "

    page := 0
    pagesize := 0
    orderby := ""
    
    for _, arg := range args {
        switch v := arg.(type) {
        case PagingType:
            item := v
            page = item.Page
            pagesize = item.Pagesize
        case OrderingType:
            item := v
            orderby = item.Order
        case LimitType:
            item := v
            page = 1
            pagesize = item.Limit
        case OptionType:
            item := v
            if item.Limit > 0 {
                page = 1
                pagesize = item.Limit
            } else {
                page = item.Page
                pagesize = item.Pagesize                
            }
            orderby = item.Order
        case Where:
            item := v

            if item.Compare == "in" {
                query += " and {{prefix}}_id in (" + strings.Trim(strings.Replace(fmt.Sprint(item.Value), " ", ", ", -1), "[]") + ")"
            } else if item.Compare == "between" {
                query += " and {{prefix}}_" + item.Column + " between ? and ?"

                s := item.Value.([2]string)
                params = append(params, s[0])
                params = append(params, s[1])
            } else {
                query += " and {{prefix}}_" + item.Column + " " + item.Compare + " ?"
                if item.Compare == "like" {
                    params = append(params, "%" + item.Value.(string) + "%")
                } else {
                    params = append(params, item.Value)                
                }
            }
        case Custom:
             item := v

             query += " and " + item.Query
        }        
    }
    
    startpage := (page - 1) * pagesize
    
    if page > 0 && pagesize > 0 {
        if orderby == "" {
            orderby = "{{prefix}}_id desc"
        } else {
            if !strings.Contains(orderby, "_") {                   
                orderby = "{{prefix}}_" + orderby
            }
            
        }
        query += " order by " + orderby
        //if config.Database == "mysql" {
            query += " limit ? offset ?"
            params = append(params, pagesize)
            params = append(params, startpage)
            /*
        } else if config.Database == "mssql" || config.Database == "sqlserver" {
            query += "OFFSET ? ROWS FETCH NEXT ? ROWS ONLY"
            params = append(params, startpage)
            params = append(params, pagesize)
        }
        */
    } else {
        if orderby == "" {
            orderby = "{{prefix}}_id"
        } else {
            if !strings.Contains(orderby, "_") {
                orderby = "{{prefix}}_" + orderby
            }
        }
        query += " order by " + orderby
    }

    rows, err := p.Query(query, params...)

    var item {{name}}
    
    if err != nil {
        log.Printf("query error : %v, %v\n", err, query)
        return &item
    }

    defer rows.Close()

    if rows.Next() {
        {{flag = false}}
        rows.Scan({{range items}}{{if .Name == "Price" || .Name == "Totalprice" || .Name == "Count" || .Name == "Score"}}{{if flag == true}},{{end}}&item.{{.Name}}{{flag = true}}{{end}}{{end}})        
    }

    return &item        
}{{end}}
